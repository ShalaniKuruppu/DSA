#include <iostream>
using namespace std;
  
// function to heapify the tree
void heapify(int arr[], int n, int root)
{
   // Initialize largest as root
    int largest = root;
 
    // left child index
    int l = 2 * root + 1;
 
    // right child index
    int r = 2 * root + 2;
 
    // If left child is larger than root
    if (l < n && arr[l] > arr[largest])
        largest = l;
 
    // If right child is larger than largest
    if (r < n && arr[r] > arr[largest])
        largest = r;
 
    // If largest is not root
    if (largest != root) {
        swap(arr[root], arr[largest]);
 
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
   
  
   
}
  
// implementing heap sort
void heapSort(int arr[], int n)
{
   // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
 
    // One by one extract an element from heap
    for (int i = n - 1; i > 0; i--) {
 
        // Move current root to end
        swap(arr[0], arr[i]);
 
        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
   
}
  
/* print contents of array */
void displayArray(int arr[], int n)
{
   for (int i=0; i<n; ++i)
   cout << arr[i] << " ";
   cout << "\n";
}
  
// main program
int main()
{
   int n;
   cout << "Enter the number of elements: ";
   cin >> n;   //Read the number of elements from user
   int heap_arr[n]; //declaring an array to store the elements
   cout << "Enter the elements:\n";
   for (int i=0; i<n; ++i) //loop to read each element and store in the array
   {
      cout << "Element " << i+1 << ": ";
      cin >> heap_arr[i];
   }
  
   cout<<"Input array: ";
   displayArray(heap_arr,n);  //display the input array
  
   heapSort(heap_arr, n);   //sort the array using heap sort
  
   cout << "Sorted array: ";
   displayArray(heap_arr, n);  //display the sorted array
   return 0;
}

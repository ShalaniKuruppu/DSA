#include <iostream>
using namespace std;


#define V 6  // Number of vertices in the graph

int minKey(int key[], bool mstSet[]) //function to find the vertex with minimum key value,from the set of vertices which are not in MST
{
    // Initialize min value
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}


void printMST(int parent[], int graph[V][V])   //function to print the constructed MST stored in parent[]
{
    cout << "Edge \tWeight "<<endl;
    for (int i = 1; i < V; i++)
        cout << parent[i] << " - " << i << " \t"<< graph[i][parent[i]] << " \n";
}

// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation
void primMST(int graph[V][V])
{
    // Array to store constructed MST
    int parent[V];
    int key[V];
    bool mstSet[V];

    for (int i = 0; i < V; i++)  // Initializing  all keys as INFINITE
        key[i] = INT_MAX, mstSet[i] = false;


    key[0] = 0;

    parent[0] = -1;

    // The MST will have V vertices
    for (int count = 0; count < V - 1; count++) {

        int u = minKey(key, mstSet);  //getting the minimum key vertex from the set of vertices which are not in MST

        mstSet[u] = true; // Adding  the picked vertex to the MST Set

        for (int v = 0; v < V; v++)

            if (graph[u][v] && mstSet[v] == false
                && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    // Printing the MST
    printMST(parent, graph);
}


int main()
{
    int graph[V][V] = { { 0,3,0,0,0,1 },
                        { 3,0,2,1,10,0 },
                        { 0,2,0,3,0,5 },
                        { 0,1,3,0,5,0 },
                        { 1,10,0,5,0,4},
                        {1,0,5,0,4,0}};

    // Print the solution
    primMST(graph);

    return 0;
}

